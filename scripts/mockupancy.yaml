mockupancy:
  sequence:
    - condition: state
      entity_id: input_select.hass_mode
      state: 'Extended Away'
    # Pick a random bedtime between 10pm and midnight.
    - service: input_datetime.set_time
      data_template:
        entity_id: input_datetime.mockupancy_bedtime
        time: "{{ (range(22, 23)|random|int) }}:{{ (range(0, 59)|random|int) }}:00"
    # Start scripts to randomise occasional lights
    - service: script.random_livingroom_loop
    # At bedtime turn off script
    - wait_template: "{{ states('sensor.time') == (state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')|int|timestamp_custom('%H:%M', False)) }}"
     # Stop  randomisation
    - service: homeassistant.turn_off
      entity_id:
        - script.random_livingroom
        - script.random_livingroom_loop

random_livingroom:
  sequence:
    # Check that it Extended Away mode is still on
    - condition: state
      entity_id: input_select.hass_mode
      state: 'Extended Away'

    # Wait a random nmber of minutes between 15 and 90 and switch on
    - delay: "00:{{ (range(15, 30)|random|int) }}:00"
    - service: homeassistant.turn_on
      entity_id: switch.qubino_zmnhsdx_din_dimmer_switch

    # Wait for between 3 minutes and 9 minutes and switch off
    - delay: "00:{{ (range(3, 9)|random|int) }}:00"
    - service: homeassistant.turn_off
      entity_id: switch.qubino_zmnhsdx_din_dimmer_switch

    # Loop the script for next time.
    - service: script.random_livingroom_loop

random_livingroom_loop:
  sequence:
    # Stop the calling script
    - service: homeassistant.turn_off
      entity_id: script.random_livingroom
    - delay: 00:05:00

    # Check that Extended Away mode is on and restart the script
    - condition: state
      entity_id: input_select.hass_mode
      state: 'Extended Away'
    - service: script.random_livingroom